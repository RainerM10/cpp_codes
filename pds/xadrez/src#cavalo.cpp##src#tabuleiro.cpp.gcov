        -:    0:Source:src/tabuleiro.cpp
        -:    0:Programs:40
        -:    1:#include "tabuleiro.h"
        -:    2:#include "peao.h"
        -:    3:#include "bispo.h"
        -:    4:#include "cavalo.h"
        -:    5:#include "torre.h"
        -:    6:#include "rainha.h"
        -:    7:#include "rei.h"
        -:    8:
       32:    9:Tabuleiro::Tabuleiro() : _pecas(new std::map<Posicao, Peca *>)
        -:   10:{
       32:   11:  std::string brancas = BRANCAS;
       64:   12:  std::string negras = NEGRAS;
       32:   13:  this->inicializa_pecas(brancas);
       32:   14:  this->inicializa_pecas(negras);
       32:   15:}
        -:   16:
       64:   17:Tabuleiro::~Tabuleiro()
        -:   18:{
        -:   19:
       32:   20:  this->delete_pecas();
       32:   21:}
        -:   22:
       32:   23:void Tabuleiro::delete_pecas()
        -:   24:{
       1k:   25:  for (auto it_peca = this->_pecas->begin(); it_peca != this->_pecas->end(); it_peca++)
        -:   26:  {
       2k:   27:    delete it_peca->second;
        -:   28:  }
       32:   29:  delete this->_pecas;
       32:   30:}
        -:   31:
        8:   32:bool Tabuleiro::esta_no_tabuleiro(Posicao &p)
        -:   33:{
      136:   34:  if (p._x > 7 || p._x < 0 || p._y > 7 || p._y < 0)
        -:   35:  {
        4:   36:    return false;
        -:   37:  }
        -:   38:  return true;
        -:   39:}
        -:   40:
      444:   41:Peca *Tabuleiro::get_peca(Posicao &pos)
        -:   42:{
        -:   43:
      444:   44:  auto peca = this->_pecas->find(pos);
      888:   45:  if (peca == this->_pecas->end())
        -:   46:  {
      396:   47:    throw PosicaoSemPecaException("Nao tem peca nessa posicao");
        -:   48:  }
      624:   49:  return peca->second;
        -:   50:}
        -:   51:
      156:   52:bool Tabuleiro::tem_peca(int x, int y)
        -:   53:{
      156:   54:  Posicao pos = Posicao(x, y);
      312:   55:  return this->_pecas->find(pos) != this->_pecas->end();
        -:   56:}
        -:   57:
      156:   58:void Tabuleiro::move_peca(Posicao &pos, int x, int y)
        -:   59:{
      156:   60:  Posicao nova = Posicao(pos._x + x, pos._y + y);
        -:   61:
      156:   62:  Peca *p = this->get_peca(pos);
        -:   63:
      156:   64:  if (!p->pode_mover(x, y))
        -:   65:  {
       84:   66:    throw MovimentoInvalidoException("Movimento Invalido");
        -:   67:  }
      128:   68:  if (!this->esta_no_tabuleiro(nova))
        -:   69:  {
       60:   70:    throw PosicaoForaDoTabuleiroException("Fora do Tabuleiro");
        -:   71:  }
      108:   72:  if (p->tem_peca_na_frente(nova._x, nova._y, this))
        -:   73:  {
       20:   74:    throw PecaNaFrenteException("Peca na Frente");
        -:   75:  }
        -:   76:
       88:   77:  p->mover(x, y);
       88:   78:  auto it = this->_pecas->find(pos);
       88:   79:  this->_pecas->erase(it);
      176:   80:  this->_pecas->insert(std::make_pair(nova, p));
       88:   81:}
        -:   82:
       64:   83:void Tabuleiro::inicializa_pecas(std::string &cor)
        -:   84:{
       64:   85:  int initial = cor == BRANCAS ? 7 : 0;
       64:   86:  int acc = cor == BRANCAS ? -1 : 1;
       64:   87:  bool ehPositivo = cor != BRANCAS;
        -:   88:
        -:   89:  //inicia os peoes
      576:   90:  for (int i = 0; i < 8; i++)
        -:   91:  {
      512:   92:    Posicao pos = Posicao(i, initial + acc);
      512:   93:    Peao *peao = new Peao(i, initial + acc, cor, ehPositivo);
      512:   94:    auto par = std::make_pair(pos, peao);
      512:   95:    this->_pecas->insert(par);
        -:   96:    //this->_pecas[time][Posicao(i, initial + acc)] = new Peao(i, initial + acc);
        -:   97:  }
        -:   98:
        -:   99:  //inicia as torres
      192:  100:  for (int i = 0; i < 8; i += 7)
        -:  101:  {
      128:  102:    Posicao pos = Posicao(i, initial);
      128:  103:    Torre *torre = new Torre(i, initial, cor);
      128:  104:    auto par = std::make_pair(pos, torre);
      128:  105:    this->_pecas->insert(par);
        -:  106:    //this->_pecas[time][Posicao(i, initial)] = new Torre(i, initial);
        -:  107:  }
        -:  108:
        -:  109:  //inicia os cavalos
      192:  110:  for (int i = 1; i < 8; i += 5)
        -:  111:  {
      128:  112:    Posicao pos = Posicao(i, initial);
      128:  113:    Cavalo *cavalo = new Cavalo(i, initial, cor);
      128:  114:    auto par = std::make_pair(pos, cavalo);
      128:  115:    this->_pecas->insert(par);
        -:  116:    //this->_pecas[time][Posicao(i, initial)] = new Cavalo(i, initial);
        -:  117:  }
        -:  118:
        -:  119:  //inicia os bispos
      192:  120:  for (int i = 2; i < 8; i += 3)
        -:  121:  {
      128:  122:    Posicao pos = Posicao(i, initial);
      128:  123:    Bispo *bispo = new Bispo(i, initial, cor);
      128:  124:    auto par = std::make_pair(pos, bispo);
      128:  125:    this->_pecas->insert(par);
        -:  126:    //this->_pecas[time][Posicao(i, initial)] = new Bispo(i, initial);
        -:  127:  }
        -:  128:
       64:  129:  { //inicia a rainha e o rei
       64:  130:    Posicao pos = Posicao(3, initial);
       64:  131:    Rainha *rainha = new Rainha(3, initial, cor);
       64:  132:    auto par = std::make_pair(pos, rainha);
       64:  133:    this->_pecas->insert(par);
        -:  134:    //this->_pecas[time][Posicao(3, initial)] = new Rainha(3, initial);
        -:  135:  }
        -:  136:
       64:  137:  {
       64:  138:    Posicao pos = Posicao(4, initial);
       64:  139:    Rei *rei = new Rei(4, initial, cor);
       64:  140:    auto par = std::make_pair(pos, rei);
       64:  141:    this->_pecas->insert(par);
        -:  142:    //this->_pecas[time][Posicao(4, initial)] = new Rei(4, initial);
        -:  143:  }
       64:  144:}
        -:  145:
        4:  146:void Tabuleiro::printa_tabuleiro()
        -:  147:{
        4:  148:  std::cout << std::endl;
        4:  149:  std::cout << std::endl;
        -:  150:
       36:  151:  for (int i = 7; i > -1; i--)
        -:  152:  {
      288:  153:    for (int j = 0; j < 8; j++)
        -:  154:    {
      256:  155:      Posicao pos = Posicao(j, i);
      256:  156:      try
        -:  157:      {
      256:  158:        Peca *p = this->get_peca(pos);
      256:  159:        std::cout << p->get_nome() << " ";
        -:  160:      }
      256:  161:      catch (std::exception &e)
        -:  162:      {
      128:  163:        std::cout << ". ";
        -:  164:      }
        -:  165:    }
       32:  166:    std::cout << std::endl;
        -:  167:  }
        4:  168:  std::cout << std::endl;
        4:  169:  std::cout << std::endl;
        4:  170:}
